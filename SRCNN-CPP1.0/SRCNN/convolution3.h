#ifndef __CONVOLUTION3_H_INCLUDED
#define __CONVOLUTION3_H_INCLUDED

#include <cv.h>
#include <highgui.h>

#define CONV2_FILTERS	32

//IplImage* pImgConv3 = cvCreateImage(cvGetSize(pImg), IPL_DEPTH_8U, 1);
//Convolution55(pImgConv2, pImgConv3, weights_conv3_data, biases_conv3);
void Convolution55(IplImage* src[], IplImage* dst, float kernel[32][5][5], float bias)
{
	/*扩展src图像*/
	IplImage* src2[CONV2_FILTERS];
	for (int i = 0; i < CONV2_FILTERS; i++)
	{
		src2[i] = cvCreateImage(CvSize(src[i]->width + 4, src[i]->height + 4), IPL_DEPTH_16U, 1);
		for (int row = 0; row < src2[i]->height; row++)
		{
			for (int col = 0; col < src2[i]->width; col++)
			{
				int tmpRow = row - 2;
				int tmpCol = col - 2;

				if (tmpRow < 0)
					tmpRow = 0;
				else if (tmpRow >= src[i]->height)
					tmpRow = src[i]->height - 1;

				if (tmpCol < 0)
					tmpCol = 0;
				else if (tmpCol >= src[i]->width)
					tmpCol = src[i]->width - 1;

				(src2[i]->imageData + row*src2[i]->widthStep)[2 * col] 
					= (src[i]->imageData + tmpRow*src[i]->widthStep)[2 * tmpCol];
				(src2[i]->imageData + row*src2[i]->widthStep)[2 * col + 1]
					= (src[i]->imageData + tmpRow*src[i]->widthStep)[2 * tmpCol + 1];
			}
		}
	}
	
	/*遍历dst所有像素*/
	for (int row = 0; row < dst->height; row++)
	{
		for (int col = 0; col < dst->width; col++)
		{
			double temp = 0;	//存储dst[row][col]像素值16

			for (int i = 0; i < CONV2_FILTERS; i++)
			{
				double temppixel = 0;	//src2[i]在row-col下卷积值
				for (int m = 0; m < 5; m++)
				{
					for (int n = 0; n < 5; n++)
					{
						unsigned int t = 0;	//取出src2[i].[row+m][col+n]像素值
						t += (unsigned char)(src2[i]->imageData + (row + m)*src2[i]->widthStep)[2 * (col + n)];
						t <<= 8;
						t += (unsigned char)(src2[i]->imageData + (row + m)*src2[i]->widthStep)[2 * (col + n) + 1];

						temppixel += kernel[i][m][n] * t;
					}
				}

				temp += temppixel;
			}

			temp += bias;

			/*阈值化(取正数，四舍五入)*/
			unsigned int tempINT = 0;
			if (temp > 0 && temp < 255)
			{
				tempINT = (unsigned int)(temp + 0.5);
			}
			else if (temp >= 255)
			{
				tempINT = 255;
			}
			(dst->imageData + row*dst->widthStep)[col] = (unsigned char)tempINT;
		}

		cout << "Convolution Layer III : " << setw(4) << row+1 << '/' << dst->height << " Complete..." << endl;
	}
}

float biases_conv3 = 12.8460;

float weights_conv3_data[32][5][5] = {
	//01
	-0.0173, -0.0067, +0.0284, +0.0179, -0.0081,
	+0.0250, -0.0085, -0.0134, -0.0298, +0.0145,
	+0.0154, -0.0218, +0.0914, -0.0342, +0.0226,
	+0.0098, -0.0478, +0.0082, -0.0095, -0.0004,
	+0.0115, +0.0102, +0.0064, -0.0133, -0.0041,
	//02
	+0.0149, +0.0146, -0.0087, -0.0109, +0.0231,
	-0.0125, -0.0222, -0.0341, -0.0325, -0.0008,
	+0.0234, +0.0392, +0.0503, +0.0158, +0.0345,
	-0.0002, -0.0117, +0.0003, -0.0157, +0.0021,
	+0.0129, -0.0168, -0.0192, -0.0097, +0.0025,
	//03
	+0.0194, +0.0088, -0.0075, -0.0121, +0.0133,
	-0.0019, +0.0020, +0.0180, -0.0101, -0.0147,
	-0.0088, +0.0241, +0.0475, +0.0080, -0.0130,
	-0.0165, -0.0070, +0.0179, -0.0274, -0.0078,
	+0.0114, -0.0081, -0.0001, +0.0080, +0.0124,
	//04
	-0.0044, -0.0031, -0.0066, -0.0242, -0.0018,
	-0.0148, -0.0173, +0.0311, -0.0076, -0.0165,
	+0.0003, +0.0168, +0.0554, +0.0287, -0.0014,
	-0.0093, -0.0037, +0.0020, +0.0045, +0.0104,
	-0.0146, -0.0155, -0.0208, -0.0042, +0.0083,
	//05
	+0.0269, +0.0045, -0.0210, -0.0125, +0.0115,
	+0.0037, -0.0029, +0.0041, -0.0184, -0.0174,
	-0.0134, +0.0225, +0.0438, +0.0115, -0.0144,
	-0.0236, -0.0044, +0.0281, -0.0212, +0.0048,
	+0.0025, -0.0099, +0.0083, +0.0123, +0.0273,
	//06
	+0.0004, +0.0221, -0.0144, -0.0065, +0.0050,
	+0.0015, -0.0164, -0.0316, -0.0217, +0.0127,
	+0.0184, -0.0106, +0.0915, -0.0278, +0.0178,
	+0.0200, -0.0140, -0.0338, -0.0322, +0.0050,
	-0.0050, -0.0096, +0.0108, +0.0181, -0.0073,
	//07
	+0.0042, +0.0010, -0.0069, -0.0110, +0.0225,
	-0.0196, -0.0020, +0.0226, +0.0047, -0.0039,
	-0.0011, +0.0185, +0.0559, +0.0224, -0.0054,
	-0.0017, -0.0144, -0.0030, -0.0084, -0.0167,
	+0.0208, +0.0052, -0.0319, -0.0103, +0.0016,
	//08
	+0.0051, -0.0119, -0.0294, -0.0086, +0.0365,
	-0.0238, -0.0047, +0.0012, +0.0045, -0.0000,
	+0.0013, +0.0185, +0.0577, +0.0296, -0.0055,
	+0.0068, -0.0150, +0.0077, +0.0077, -0.0164,
	+0.0362, +0.0256, -0.0264, -0.0120, +0.0097,
	//09
	+0.0130, +0.0038, -0.0112, -0.0168, +0.0077,
	-0.0047, -0.0056, +0.0185, -0.0111, -0.0161,
	-0.0047, +0.0229, +0.0495, +0.0170, -0.0083,
	-0.0150, -0.0041, +0.0141, -0.0160, +0.0012,
	+0.0000, -0.0113, -0.0064, +0.0040, +0.0141,
	//10
	+0.0080, -0.0035, -0.0185, -0.0224, +0.0038,
	-0.0054, -0.0127, +0.0159, -0.0145, -0.0190,
	-0.0035, +0.0198, +0.0498, +0.0221, -0.0067,
	-0.0140, -0.0018, +0.0188, -0.0058, +0.0094,
	-0.0061, -0.0102, -0.0014, +0.0028, +0.0151,
	//11
	+0.0090, -0.0020, -0.0006, +0.0031, +0.0080,
	-0.0116, -0.0021, +0.0340, -0.0127, +0.0042,
	-0.0387, +0.0095, +0.0651, -0.0048, -0.0042,
	-0.0255, -0.0195, +0.0144, -0.0163, -0.0059,
	-0.0046, -0.0073, +0.0094, -0.0002, +0.0113,
	//12
	+0.0053, -0.0023, -0.0150, -0.0183, +0.0154,
	-0.0128, -0.0059, +0.0188, -0.0000, -0.0081,
	+0.0043, +0.0213, +0.0560, +0.0266, -0.0030,
	-0.0011, -0.0090, +0.0020, -0.0050, -0.0072,
	+0.0138, +0.0014, -0.0235, -0.0069, +0.0052,
	//13
	+0.0152, -0.0009, -0.0053, -0.0002, +0.0123,
	-0.0134, -0.0205, +0.0283, -0.0182, -0.0034,
	-0.0127, +0.0067, +0.0788, -0.0113, +0.0015,
	-0.0249, -0.0220, +0.0269, -0.0345, -0.0245,
	-0.0096, -0.0038, +0.0301, +0.0006, +0.0135,
	//14
	-0.0109, -0.0098, -0.0052, -0.0088, -0.0113,
	-0.0027, -0.0042, +0.0013, -0.0016, -0.0052,
	+0.0053, +0.0050, +0.0412, +0.0034, -0.0001,
	-0.0025, -0.0018, +0.0010, -0.0054, -0.0072,
	-0.0025, -0.0001, +0.0010, -0.0051, -0.0071,
	//15
	+0.0118, -0.0114, -0.0290, +0.0041, +0.0188,
	-0.0084, -0.0016, -0.0034, -0.0078, +0.0142,
	-0.0299, +0.0136, +0.1166, -0.0157, -0.0128,
	-0.0068, -0.0221, +0.0270, -0.0570, -0.0140,
	+0.0120, -0.0102, +0.0035, -0.0097, +0.0175,
	//16
	-0.0200, +0.0218, +0.0216, -0.0019, -0.0017,
	-0.0020, -0.0145, -0.0490, -0.0242, +0.0079,
	+0.0098, -0.0111, +0.1162, -0.0346, +0.0252,
	-0.0052, -0.0239, -0.0527, -0.0095, +0.0050,
	+0.0057, +0.0125, +0.0131, +0.0175, -0.0189,
	//17
	+0.0080, -0.0011, -0.0193, -0.0264, +0.0107,
	-0.0100, -0.0130, +0.0175, -0.0060, -0.0103,
	+0.0140, +0.0213, +0.0557, +0.0340, +0.0025,
	+0.0034, -0.0119, -0.0082, +0.0006, +0.0002,
	+0.0044, -0.0057, -0.0325, -0.0061, +0.0092,
	//18
	-0.0046, -0.0041, -0.0117, -0.0178, +0.0116,
	-0.0190, -0.0121, +0.0294, -0.0130, -0.0082,
	-0.0040, +0.0178, +0.0617, +0.0097, -0.0050,
	-0.0058, -0.0094, +0.0189, -0.0158, -0.0082,
	-0.0029, -0.0104, +0.0001, -0.0072, -0.0111,
	//19
	+0.0119, -0.0004, -0.0143, -0.0064, +0.0303,
	-0.0142, +0.0057, +0.0124, +0.0067, -0.0030,
	-0.0026, +0.0235, +0.0557, +0.0182, -0.0106,
	+0.0000, -0.0117, +0.0092, -0.0138, -0.0219,
	+0.0373, +0.0164, -0.0185, -0.0060, +0.0051,
	//20
	+0.0044, -0.0025, -0.0118, -0.0181, +0.0046,
	-0.0108, -0.0113, +0.0211, -0.0121, -0.0189,
	-0.0106, +0.0163, +0.0501, +0.0187, -0.0104,
	-0.0167, -0.0028, +0.0187, -0.0050, +0.0080,
	-0.0080, -0.0099, -0.0041, +0.0008, +0.0129,
	//21
	-0.0153, -0.0175, +0.0030, -0.0037, -0.0243,
	-0.0126, -0.0063, +0.0432, -0.0007, -0.0250,
	-0.0222, +0.0247, +0.0536, +0.0041, +0.0055,
	-0.0266, +0.0016, +0.0185, -0.0276, -0.0051,
	-0.0238, -0.0222, +0.0037, -0.0230, -0.0197,
	//22
	+0.0071, -0.0165, -0.0435, +0.0137, -0.0141,
	-0.0257, -0.0203, -0.0017, +0.0034, -0.0182,
	-0.0405, +0.0655, +0.1182, +0.0128, -0.0217,
	-0.0559, +0.0138, +0.0191, -0.0473, -0.0241,
	-0.0207, +0.0156, -0.0342, -0.0140, +0.0029,
	//23
	+0.0103, +0.0026, -0.0084, -0.0093, +0.0187,
	-0.0112, +0.0021, +0.0192, -0.0009, -0.0089,
	-0.0083, +0.0203, +0.0519, +0.0133, -0.0114,
	-0.0104, -0.0097, +0.0119, -0.0175, -0.0136,
	+0.0183, +0.0014, -0.0124, -0.0021, +0.0054,
	//24
	+0.0131, +0.0074, -0.0203, -0.0278, +0.0089,
	+0.0062, -0.0066, +0.0201, -0.0179, -0.0065,
	-0.0193, +0.0172, +0.0531, -0.0101, -0.0068,
	-0.0245, -0.0163, +0.0203, -0.0414, +0.0064,
	-0.0014, -0.0266, +0.0205, +0.0110, -0.0043,
	//25
	-0.0103, -0.0498, +0.0184, -0.0126, -0.0480,
	-0.0287, -0.0364, +0.0443, +0.0274, -0.0454,
	-0.0054, -0.0056, +0.0949, +0.0156, -0.0043,
	-0.0137, -0.0023, +0.0451, -0.0412, -0.0300,
	-0.0293, -0.0072, +0.0047, -0.0250, -0.0145,
	//26
	+0.0177, -0.0082, +0.0094, +0.0433, +0.0169,
	-0.0160, -0.0099, +0.0004, -0.0395, +0.0072,
	-0.0272, -0.0303, +0.0597, -0.0310, -0.0074,
	-0.0017, -0.0584, +0.0230, -0.0128, -0.0374,
	+0.0396, +0.0254, -0.0017, -0.0146, +0.0141,
	//27
	-0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
	-0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
	-0.0000, -0.0000, +0.0313, -0.0000, -0.0000,
	-0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
	-0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
	//28
	-0.0030, +0.0176, +0.0237, +0.0264, +0.0073,
	+0.0059, -0.0264, -0.0550, -0.0199, +0.0013,
	+0.0059, -0.0401, +0.0926, -0.0234, -0.0218,
	+0.0167, -0.0100, -0.0334, -0.0086, +0.0340,
	+0.0021, +0.0220, -0.0162, +0.0131, +0.0038,
	//29
	+0.0042, -0.0118, -0.0125, +0.0058, +0.0060,
	-0.0128, -0.0289, +0.0003, -0.0534, +0.0007,
	-0.0026, -0.0237, +0.0712, -0.0074, +0.0082,
	+0.0128, -0.0516, +0.0004, +0.0049, -0.0045,
	+0.0170, +0.0242, +0.0009, -0.0127, +0.0129,
	//30
	+0.0116, +0.0111, +0.0038, +0.0014, +0.0052,
	+0.0046, -0.0013, -0.0031, -0.0055, +0.0059,
	+0.0032, +0.0031, +0.0356, -0.0022, +0.0067,
	+0.0015, -0.0016, -0.0008, -0.0033, +0.0042,
	+0.0031, -0.0025, -0.0045, -0.0009, +0.0047,
	//31
	+0.0043, -0.0183, -0.0096, -0.0145, +0.0015,
	-0.0129, -0.0236, +0.0420, -0.0100, -0.0044,
	+0.0077, +0.0037, +0.1013, -0.0042, -0.0086,
	-0.0093, -0.0338, +0.0107, -0.0477, -0.0325,
	+0.0041, -0.0026, +0.0156, +0.0017, +0.0131,
	//32
	+0.0036, -0.0289, -0.0722, -0.0164, +0.0014,
	-0.0153, -0.0107, -0.0147, -0.0459, -0.0250,
	-0.0016, +0.0357, +0.0330, +0.0404, +0.0342,
	-0.0265, -0.0149, +0.0077, -0.0297, -0.0107,
	-0.0242, -0.0243, -0.0311, -0.0451, -0.0154,
};

#endif //__CONVOLUTION3_H_INCLUDED